{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","state","messages","user","isAuthenticated","googleProvider","auth","GoogleAuthProvider","signInWithPopup","console","error","signOut","onAuthStateChanged","setState","loadMessages","database","ref","limitToLast","on","snap","message","val","id","key","push","Dialog","open","this","DialogTitle","List","ListItem","button","onClick","signIn","ListItemAvatar","Avatar","style","backgroundColor","src","height","alt","ListItemText","primary","saveMessage","catch","Button","chatUser","slice","reverse","onSend","AppBar","position","color","Toolbar","Typography","variant","styles","container","renderPopup","channelList","renderChannelsHeader","renderChannels","chat","renderChatHeader","renderChat","settings","renderSettingsHeader","renderSignOutButton","Component","flex","display","flexDirection","borderWidth","borderColor","borderRightStyle","borderLeftStyle","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d0339c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GiftedChat } from \"react-web-gifted-chat\";\nimport firebase from \"firebase\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nconst config = {\n  apiKey: \"AIzaSyAlAJb9WhwpIQFMIr71xo4o4mak4ZKcCtQ\",\n  authDomain: \"chat-9c8a0.firebaseapp.com\",\n  databaseURL: \"https://chat-9c8a0.firebaseio.com\",\n  projectId: \"chat-9c8a0\",\n  storageBucket: \"chat-9c8a0.appspot.com\",\n  messagingSenderId: \"864745586248\",\n  appId: \"1:864745586248:web:f275311335afe2b46fa27d\",\n  measurementId: \"G-K5XC06RPR6\"\n};\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      user: {},\n      isAuthenticated: false,\n    };\n  }\n\n  async signIn() {\n    const googleProvider = new firebase.auth.GoogleAuthProvider();\n    try {\n      await firebase.auth().signInWithPopup(googleProvider);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  signOut() {\n    firebase.auth().signOut();\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ isAuthenticated: true, user });\n        this.loadMessages();\n      } else {\n        this.setState({ isAuthenticated: false, user: {}, messages: [] });\n      }\n    });\n  }\n\n  loadMessages() {\n    const callback = snap => {\n      const message = snap.val();\n      message.id = snap.key;\n      const { messages } = this.state;\n      messages.push(message);\n      this.setState({ messages });\n    };\n    firebase\n      .database()\n      .ref(\"/messages/\")\n      .limitToLast(12)\n      .on(\"child_added\", callback);\n  }\n\n  renderPopup() {\n    return (\n      <Dialog open={!this.state.isAuthenticated}>\n        <DialogTitle id=\"simple-dialog-title\">Sign in</DialogTitle>\n        <div>\n          <List>\n            <ListItem button onClick={() => this.signIn()}>\n              <ListItemAvatar>\n                <Avatar style={{ backgroundColor: \"#eee\" }}>\n                  <img\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"\n                    height=\"30\"\n                    alt=\"G\"\n                  />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary=\"Sign in with Google\" />\n            </ListItem>\n          </List>\n        </div>\n      </Dialog>\n    );\n  }\n\n  onSend(messages) {\n    for (const message of messages) {\n      this.saveMessage(message);\n    }\n  }\n\n  saveMessage(message) {\n    return firebase\n      .database()\n      .ref(\"/messages/\")\n      .push(message)\n      .catch(function(error) {\n        console.error(\"Error saving message to Database:\", error);\n      });\n  }\n\n  renderSignOutButton() {\n    if (this.state.isAuthenticated) {\n      return <Button onClick={() => this.signOut()}>Sign out</Button>;\n    }\n    return null;\n  }\n\n  renderChat() {\n    return (\n      <GiftedChat\n        user={this.chatUser}\n        messages={this.state.messages.slice().reverse()}\n        onSend={messages => this.onSend(messages)}\n      />\n    );\n  }\n\n  renderChannels() {\n    return (\n      <List>\n        <ListItem button>\n          <ListItemAvatar>\n            <Avatar>D</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary=\"Default\" />\n        </ListItem>\n      </List>\n    );\n  }\n\n  renderChannelsHeader() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Channels\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n  renderChatHeader() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Default channel\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n  renderSettingsHeader() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Settings\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n\n  render() {\n    return (\n      <div style={styles.container}>\n        {this.renderPopup()}\n        <div style={styles.channelList}>\n          {this.renderChannelsHeader()}\n          {this.renderChannels()}\n        </div>\n        <div style={styles.chat}>\n          {this.renderChatHeader()}\n          {this.renderChat()}\n        </div>\n        <div style={styles.settings}>\n          {this.renderSettingsHeader()}\n          {this.renderSignOutButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"row\",\n    height: \"100vh\",\n  },\n  channelList: {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n  },\n  chat: {\n    display: \"flex\",\n    flex: 3,\n    flexDirection: \"column\",\n    borderWidth: \"1px\",\n    borderColor: \"#ccc\",\n    borderRightStyle: \"solid\",\n    borderLeftStyle: \"solid\",\n  },\n  settings: {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n  },\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}